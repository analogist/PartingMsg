// +build ignore

package main
import (
    "fmt"
    "os"
    "bufio"
    "io/ioutil"
    "encoding/base64"
    "crypto/rand"
    "golang.org/x/crypto/nacl/secretbox"
    sssa "github.com/SSSaaS/sssa-golang"
)

const messageAsset = `// Code generated by partingmsg; DO NOT EDIT.

package partmsg

var Encryptedencode = `

func main() {
    var symkey [32]byte
    var nonce [24]byte
    var message string

    if _, err := rand.Read(symkey[:]); err != nil {
        panic(err)
    }

    if _, err := rand.Read(nonce[:]); err != nil {
        panic(err)
    }

    fmt.Println("Please type the desired message. End the message")
    fmt.Println("with Ctrl+D, or by typing DONE, on its own line.")
    fmt.Println("==========")
    scanner := bufio.NewScanner(os.Stdin)
    for scanner.Scan() {
        if scanner.Text() == "DONE" {
            break
        }
        message += scanner.Text() + "\n"
    }
    if err := scanner.Err(); err != nil {
        panic(err)
    }

    pieces, err := sssa.Create(3, 4, string(symkey[:]))
    if err != nil {
        panic(err)
    }

    encrypted := secretbox.Seal(nonce[:], []byte(message), &nonce, &symkey)
    encryptedencode := base64.StdEncoding.EncodeToString(encrypted)

    fmt.Println("==========\nPieces to follow:\n==========")
    for _, piece := range pieces {
        fmt.Println(piece)
    }
    fmt.Println("==========")

    err = ioutil.WriteFile("encodedmessage.go", []byte(messageAsset + "\"" + encryptedencode + "\"\n"), 0644)
    if err != nil {
        panic(err)
    }
}
